/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;
import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code
{:
    public Double resultado=0.0; // variable de salida tipo Double
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Caracter no esperado");
        TablaES.add(datos);
     
    }
:}


/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales 

terminal String para,parc;
terminal String mas,menos,por,div;
terminal String num; // el valor de entrada del numero entero lo tomamos como String
terminal String numD; // el valor de entrada del numero decimal lo tomamos como String

//------> declaracion de no terminales
non terminal INICIO;
non terminal Double E; // la expresion la fijamos como double

//----> precedencia de menor a mayor 
precedence left mas,menos;
precedence left por,div;


start with INICIO; 

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/
INICIO::=E:a {: resultado=a; :};

E  ::= // el resultado que sale en la expresion es de tipo double
    E:a mas        E:b     {:RESULT=a+b;:}
 |  E:a menos      E:b     {:RESULT=a-b;:}
 |  E:a por        E:b     {:RESULT=a*b;:}
 |  E:a div        E:b     {:RESULT=a/b;:}
 |  num:a                               {:RESULT=new Double(a);:} 
 |  numD:a                              {:RESULT=new Double(a);:}
 |  para E:a parc              {:RESULT=a;:}
 |  
;